package ru.lcard.ltr.ltrapi;

import jnr.ffi.LibraryLoader;
import jnr.ffi.Pointer;
import jnr.ffi.annotations.Out;
import jnr.ffi.byref.ByteByReference;
import jnr.ffi.byref.IntByReference;
import jnr.ffi.byref.LongLongByReference;
import jnr.ffi.byref.PointerByReference;


public interface LtrApi {

    LtrApi INSTANCE = LibraryLoader.create(LtrApi.class).load("ltrapi");

    /**
     * Размер строки с названием модуля в описании модуля
     */
    int LTR_MODULE_NAME_SIZE = 16;

    /**
     * Размер строки с названием устройства в описании крейта
     */
    int LTR_CRATE_DEVNAME_SIZE = 32;

    /**
     * Размер строки с серийным номером крейта
     */
    int LTR_CRATE_SERIAL_SIZE = 16;

    /**
     * Размер строки с версией прошивки крейта в его описании
     */
    int LTR_CRATE_SOFTVER_SIZE = 32;

    /**
     * Размер строки с ревизией крейта в его описании
     */
    int LTR_CRATE_REVISION_SIZE = 16;

    /**
     * Размер строки с описанием опций платы в описании крейта
     */
    int LTR_CRATE_BOARD_OPTIONS_SIZE = 16;

    /**
     * Размер строки с версией загрузчика в описании крейта
     */
    int LTR_CRATE_BOOTVER_SIZE = 16;

    /**
     * Размер строки с описанием процессора в описании крейта
     */
    int LTR_CRATE_CPUTYPE_SIZE = 16;
    /**
     * Размер строки с описанием типа крейта
     */
    int LTR_CRATE_TYPE_NAME = 16;

    /**
     * Размер дополнительной информации о крейте
     */
    int LTR_CRATE_SPECINFO_SIZE = 48;

    /**
     * Размер строки с описанием типа FPGA в описании крейта
     */
    int LTR_CRATE_FPGA_NAME_SIZE = 32;

    /**
     * Размер строки с версией прошивки FPGA в описании крейта
     */
    int LTR_CRATE_FPGA_VERSION_SIZE = 32;

    /**
     * Максимальное количество крейтов, которое можно получить с помощью
     * функции LTR_GetCrates(). В случае, если крейтов может быть больше, то
     * можно воспользоваться функцией LTR_GetCratesEx(), которая не имеет
     * ограничения на количество крейтов
     */
    int LTR_CRATES_MAX = 16;

    /**
     * Максимальное количество модулей в одном крейте
     */
    int LTR_MODULES_PER_CRATE_MAX = 16;

    /**
     * Максимальное кол-во термометров в крейте, показания которых отображаются в статистике
     */
    int LTR_CRATE_THERM_MAX_CNT = 8;
    /**
     * IP-адрес для полключения к службе ltrd, соответствующий случаю, когда
     * служба запущена на локальной машине (той же, откуда устанавливается соединение)
     */
    int LTRD_ADDR_LOCAL = 0x7F000001;

    /**
     * IP-адрес по умолчанию для подключения к службе ltrd
     */
    int LTRD_ADDR_DEFAULT = LTRD_ADDR_LOCAL;

    /**
     * TCP-порт, использующийся по умолчанию, для подключения к службе ltrd
     */
    int LTRD_PORT_DEFAULT = 11111;

    /**
     * Если данная строка используется вместо серийного номера крейта при установлении
     * подключения, то будет установлено управляющее соединение с ltrd, не связанное
     * ни с одним крейтом
     */
    String LTR_CSN_SERVER_CONTROL = "#SERVER_CONTROL";

    //-----------------------

    /**
     * Инициализация описателя соединения.
     * <p>
     * Функция инициализирует поля структуры описателя соединения значениями по умолчанию.
     * Эта функция должна вызываться первой для каждой структуры {@link TLTR} перед вызовом
     * остальных функций.
     *
     * @param hnd Описатель соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_Init(TLTR hnd);

    /**
     * Открытие соединения.
     * <p>
     * Функция устанавливает клиентское соединение в соответствие с установленными
     * полями {@link TLTR#saddr}, {@link TLTR#sport},
     * {@link TLTR#csn} и {@link TLTR#cc} описателя модуля.
     * <p>
     * После завершения работы необходимо закрыть соединение с помощью {@link LtrApi#LTR_Close}.
     * <p>
     * Если функция возвращает ошибку, то в некоторых случаях соединение может
     * оставаться открытым (например, для ошибки {@link LTR_ERRORS#WARNING_MODULE_IN_USE}), поэтому
     * даже в случае возвращения данной функцией ошибки, все равно следует
     * вызывать {@link LtrApi#LTR_Close}.
     * <p>
     * Все возвращенные ошибки (включая {@link LTR_ERRORS#WARNING_MODULE_IN_USE}) рекомендуется
     * интерпретировать как признак того, что с соединением нельзя работать и
     * единственной допустимой функцией, которую можно и нужно вызвать следующей,
     * является {@link LtrApi#LTR_Close}.
     *
     * @param hnd Описатель соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_Open(TLTR hnd);

    /**
     * Открытие управляющего соединения со службой ltrd.
     * <p>
     * Данная функция устанавливает управляющее соединение со службой ltrd.
     * Данное соединение может быть установлено даже когда нет ни одного подключенного
     * крейта и позволяет выполнять команды, управляющие работой службы (за исключением команд
     * управления крейтами, которые требует открытия
     * управляющего соединения с конкретным крейтом).
     * <p>
     * По завершению работы с соединением необходимо его закрыть, вызвав {@link LtrApi#LTR_Close}.
     * <p>
     * Действие функции аналогично правильному заполнению полей структуры {@link TLTR}
     * с использованием в качестве серийного номера строки {@link LtrApi#LTR_CSN_SERVER_CONTROL} и
     * вызову {@link LtrApi#LTR_Open} и служит для удобства, чтобы не зполнять поля вручную.
     * <p>
     * Тоже можно выполнить и заполнив правильно поля структуры {@link TLTR}  и вызвав
     * {@link LtrApi#LTR_Open}. Данная функция введена для удобства, чтобы не заполнять поля
     * вручную.
     * <p>
     * Функция доступна в ltrapi версии 1.31.0 или выше.
     *
     * @param hnd   Описатель соединения.
     * @param saddr IP-адрес машины, на которой запущена служба ltrd, в 32-битном формате
     * @param sport Номер TCP порта, который будет использоваться при подключении к службе ltrd.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_OpenSvcControl(TLTR hnd, int saddr, int sport);

    /**
     * Открытие управляющего соединения с крейтом.
     * <p>
     * Данная функция устанавливает управляющее соединение с крейтом по его
     * серийному номеру (или с первым крейтом, если серийный номер не задан).
     * <p>
     * <p>
     * Функция позволяет явно указать интерфейс, по которому установлено соединение
     * между службой ltrd и крейтом на случай, если крейт подключен одновременно
     * по двум интерфейсам (например в случае, если крейт настроен и подключен
     * по Ethernet, но также и подключен по USB в режиме настройки). В большинстве
     * случаев достаточно указать в качестве интерфейса {@link LTR_CrateIface#LTR_CRATE_IFACE_UNKNOWN},
     * что означает, что крейт может быть подключен по любому интерфейсу. При этом,
     * если крейт подключен по двум интерфейсам, то открытое соединение будет
     * связано с крейтом c использованием интерфейса, который является рабочим
     * для крейта, т.е. через который можно обмениваться данными с модулями крейта,
     * что и необходимо для большинства программ.
     * <p>
     * <p>
     * По завершению работы с соединением необходимо его закрыть, вызвав {@link LtrApi#LTR_Close}.
     * <p>
     * Действие функции аналогично правильному заполнению полей структуры {@link TLTR} и
     * вызову {@link LtrApi#LTR_Open}. Данная функция введена для удобства, чтобы не заполнять поля
     * вручную.
     * <p>
     * Функция доступна в ltrapi версии 1.31.0 или выше.
     *
     * @param hnd   Описатель соединения.
     * @param saddr IP-адрес машины, на которой запущена служба ltrd, в 32-битном формате
     * @param sport Номер TCP порта, который будет использоваться при подключении к службе ltrd.
     * @param iface Значение из {@link LTR_CrateIface}, указывающая интерфейс, по которому должен быть подключен крейт
     * @param csn   Строка с серийным номером крейта, с которым нужно установить соединение.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_OpenCrate(TLTR hnd, int saddr, int sport, LTR_CrateIface iface, String csn);

    /**
     * Открытие соединения с заданным таймаутом.
     * <p>
     * Данная функция полностью аналогична {@link LtrApi#LTR_Open}, но позволяет явно указать
     * максимальное время установления соединения с ltrd.
     *
     * @param hnd     Описатель соединения.
     * @param timeout Время в мс на открытие соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_OpenEx(TLTR hnd, long timeout);

    /**
     * Закрытие соединения.
     * <p>
     * Функция закрывает ранее открытое с помощью функций LTR_Open(),
     * LTR_OpenEx(), LTR_OpenCrate() или LTR_OpenSvcControl() соединение.
     * При любом возвращенном значении после вызова этой функции соответствующий описатель
     * соединения уже нельзя использовать без открытия нового соединения.
     *
     * @param hnd Описатель соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_Close(TLTR hnd);

    /**
     * Проверка, открыто ли соединение.
     * <p>
     * Функция проверяет, открыто ли в данный момент клиентом соединение, соответствующее
     * указанному описателю. Если соединение открыто, функция возвращает #LTR_OK,
     * если закрыто --- код ошибки #LTR_ERROR_CHANNEL_CLOSED. Данная функция не проверяет
     * каким-либо образом, действительно ли сейчас это соединение, а результат ее определяется
     * только последовательностью вызова функций --- было ли успешно открыто и не закрыто
     * данное соединение клиентом.
     *
     * @param hnd Описатель соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_IsOpened(TLTR hnd);

    /**
     * Получение версии службы ltrd.
     * <p>
     * Функция возвращает номер версии службы ltrd, с которой установлено управляющее
     * соединение.
     * <p>
     * В текстовом виде версия ltrd состоит из четырех чисел, разделенных точками.
     * Возвращаемое данной функцией число представляет собой 32-битное значение,
     * каждый байт которого соответствует одной части номера версии, отделяемой
     * в текстовой записи точкой, причем старший байт соответствует главному номеру
     * (первому числу). Например, 0x02010403 соответствует версии 2.1.4.3.
     * <p>
     * Версии службы ltrd начинаются с 2.0.0.0 и выше, в то время как версии
     * со старшим числом 1 возвращались только ранее используемой программой
     * LTR Server.
     *
     * @param hnd     Описатель соединения.
     * @param version В данной переменной возвращается версия службы ltrd в формате, описанном выше.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetServerVersion(TLTR hnd, @Out IntByReference version);

    /**
     * Получение серийных номеров подключенных крейтов.
     * <p>
     * Функция возвращает список серийных номеров крейтов, с которыми установлено
     * соединение службой ltrd (список активных крейтов). Полученные серийные номера
     * можно использовать  для установления управляющего соединения с крейтами
     * (для их конфигурации,  получения списка модулей и т.п.) или соединений с модулями.
     * <p>
     * Данная функция может вернуть максимум #LTR_CRATES_MAX серийных номеров (если
     * подключено крейтов больше, то будет возвращено только первые #LTR_CRATES_MAX).
     * Если крейтов может быть больше #LTR_CRATES_MAX, то можно использовать
     * функцию LTR_GetCratesEx(), в которой нет ограничения на количество
     * возвращаемых номеров крейтов.
     * <p>
     * Функция возвращает всегда разные серийные номера, т.е. если крейт подключен
     * и по USB (в режиме настройки) и по Ethernet (в рабочем режиме), то функция
     * заполнит только один элемент в выходном массиве.
     *
     * @param hnd Описатель соединения.
     * @param csn Двумерный массив размером [#LTR_CRATES_MAX][#LTR_CRATE_SERIAL_SIZE]
     *            байт.
     *            В данный массив будут сохранены серийные номера подключенных
     *            крейтов (каждая строка соответствует своему серийному номеру
     *            крейта).
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetCrates(TLTR hnd, @Out SN.Array csn);

    /**
     * Получение информации о подключенных крейтах.
     * <p>
     * Данная функция позволяет получить список серийных номеров крейтов, с которыми
     * установлено соединение службой ltrd (список активных крейтов)
     * с дополнительной информацией о этих крейтах.
     * <p>
     * В отличие от LTR_GetCrates() функция не ограничивает количество подключенных
     * крейтов, информация о которых может быть возвращена.
     * <p>
     * Также в отличие от LTR_GetCrates(), если один крейт подключен сразу
     * по нескольким интерфейсам, то данная функция вернет две записи о крейте,
     * т.е. его серийный номер будет указан дважды в массиве serials, но при этом
     * в соответствующих  записях с информацией о крейте будет указан разный
     * интерфейс подключения (может быть изменено флагами).
     * <p>
     * Функцию можно использовать с нулевым значением max_crates для получения количества
     * подключенных крейтов, чтобы затем создать массивы нужных размеров и вызвать
     * функцию второй раз уже для получения информации о всех крейтах.
     * <p>
     * Данная функция поддерживается только службой ltrd.
     * Функция доступна в ltrapi версии 1.31.0 или выше.
     *
     * @param hnd             Описатель соединения.
     * @param max_crates      Максимальное количество крейтов, информация о которых
     *                        может быть возвращена функцией.
     * @param flags           Флаги из #en_LTR_GetCratesFlags, управляющие работой
     *                        функции.
     * @param crates_found    В данном параметре возвращается общее количество подключенных
     *                        крейтов. Это значение может быть больше max_crates.
     *                        Если данная информация не нужна, то может быть передан
     *                        нулевой указатель.
     * @param crates_returned В данной переменной возвращается количество
     *                        действительных серийных номеров, записанных в массив serials.
     *                        Данное возвращенное значение не может быть больше
     *                        значения, переданного в параметре max_crates.
     *                        Если max_crates равно нулю, то в качестве данного параметра
     *                        можно передать нулевой указатель.
     * @param serials         Массив для сохранения серийных номеров подключенных
     *                        крейтов. Должен быть достаточного размера
     *                        для сохранения max_crates серийных номеров
     *                        (каждый серийный номер --- строка из #LTR_CRATE_SERIAL_SIZE
     *                        символов). По завершению функции будут заполнены
     *                        первые crates_returned серийных номеров.
     *                        Если max_crates равно нулю, то в качестве данного параметра
     *                        может быть передан нулевой указатель.
     * @param info            Массив для сохранения информации о подключенных крейтах.
     *                        Должен быть достаточного размера для сохранения
     *                        max_crates структур #TLTR_CRATE_INFO.
     *                        Каждый элемент соответствует серийному номеру из
     *                        serials с тем же номером. Если информация о крейтах
     *                        не нужна, то может быть передан нулевой указатель.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetCratesEx(TLTR hnd, int max_crates, int flags,
                        @Out IntByReference crates_found, @Out IntByReference crates_returned,
                        @Out SN.Array serials,
                        @Out TLTR_CRATE_INFO.Array info);

    /**
     * Получение описания крейта.
     * <p>
     * Функция позволяет получить структуру типа #TLTR_CRATE_DESCR с подробным
     * описанием заданного крейта.
     * Может быть получено описание любого подключенного крейта через одно управляющее
     * соединение --- отдельное управляющее соединение с крейтом устанавливать не нужно.
     * <p>
     * Данная функция поддерживается только службой ltrd (не поддерживается ранее
     * используемой программой LTR Server).
     *
     * @param hsrv        Описатель управляющего соединения.
     * @param crate_iface Интерфейс подключения крейта (аналогично одноименному
     *                    параметру LTR_OpenCrate()).
     * @param crate_sn    Серийный номер крейта (аналогично одноименному
     *                    параметру LTR_OpenCrate()).
     * @param descr       Структура, в которую будет сохранено описание крейта
     * @param size        Размер структуры, переданной в качестве параметра
     *                    descr.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetCrateDescr(TLTR hsrv, int crate_iface, String crate_sn, @Out TLTR_CRATE_DESCR descr, int size);

    /**
     * Получение статистики по крейту.
     * <p>
     * Функция возвращает дополнительные параметры статистики, которую ведет служба
     * ltrd, связанные с заданным крейтом, в виде структуры #TLTR_CRATE_STATISTIC.
     * <p>
     * Данная функция поддерживается только службой ltrd (не поддерживается ранее
     * используемой программой LTR Server).
     *
     * @param hsrv        Описатель управляющего соединения.
     * @param crate_iface Интерфейс подключения крейта (аналогично одноименному
     *                    параметру LTR_OpenCrate()).
     * @param crate_sn    Серийный номер крейта (аналогично одноименному
     *                    параметру LTR_OpenCrate()).
     * @param stat        Структура, в которую будут сохранены параметры
     *                    статистики по крейту.
     * @param size        Размер структуры, переданной в качестве параметра
     *                    stat.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetCrateStatistic(TLTR hsrv, int crate_iface, String crate_sn,
                              @Out TLTR_CRATE_STATISTIC stat, int size);


    /**
     * Получение статистики по модулю.
     * <p>
     * Функция возвращает дополнительные параметры статистики, которую ведет служба
     * ltrd, связанные с заданным модулем, в виде структуры #TLTR_MODULE_STATISTIC.
     * <p>
     * Данная функция поддерживается только службой ltrd (не поддерживается ранее
     * используемой программой LTR Server).
     *
     * @param hsrv        Описатель управляющего соединения.
     * @param crate_iface Интерфейс подключения крейта (аналогично одноименному
     *                    параметру LTR_OpenCrate()).
     * @param crate_sn    Серийный номер крейта (аналогично одноименному
     *                    параметру LTR_OpenCrate()).
     * @param module_slot Номер слота модуля (от #LTR_CC_CHNUM_MODULE1 до
     *                    #LTR_CC_CHNUM_MODULE16).
     * @param stat        Структура, в которую будут сохранены параметры
     *                    статистики по крейту.
     * @param size        Размер структуры, переданной в качестве параметра
     *                    stat.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetModuleStatistic(TLTR hsrv, int crate_iface, String crate_sn, int module_slot,
                               @Out TLTR_MODULE_STATISTIC stat, int size);

    /**
     * Получение списка модулей в крейте.
     * Функция позволяет получить список идентификаторов модулей, которые установлены в крейте.
     * <p>
     * На вход функции необходимо подать массив из #LTR_MODULES_PER_CRATE_MAX элементов,
     * который функция заполнит нужными значениями.
     * <p>
     * Каждый элемент соответствует своему слоту в крейте (mid[0] --- идентификатор
     * модуля, вставленного в первый слот, mid[15] --- в 16-ый) и при успешном выполнении
     * функции устанавливается в одно из значений из #en_LTR_MIDs.
     * Если в данном слоте  не вставлен модуль или слот вообще отсутствует в крейте,
     * то будет установлено значение #LTR_MID_EMPTY.
     * Если модуль был обнаружен, но его тип еще не определен, то будет возвращено
     * значение #LTR_MID_IDENTIFYING.
     *
     * @param hcrate Описатель управляющего соединения с крейтом.
     * @param mid    Указатель на массив из #LTR_MODULES_PER_CRATE_MAX
     *               элементов, в котором при успешном выполнении будут
     *               возвращены идентификаторы установленных модулей
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetCrateModules(TLTR hcrate, MID.Array mid);

    /**
     * Получение информации о типе и интерфейсе подключения крейта.
     * <p>
     * Функция заполняет структуру #TLTR_CRATE_INFO информацией о крейте, с которым
     * установлено управляющее соединение.
     *
     * @param hcrate    Описатель управляющего соединения с крейтом.
     * @param CrateInfo В данной структуре при успехе возвращается информация
     *                  о крейте.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetCrateInfo(TLTR hcrate, @Out TLTR_CRATE_INFO CrateInfo);

    /**
     * Конфигурация линий разъема синхронизации крейта.
     * <p>
     * Функция устанавливает конфигурацию линий разъема синхронизации SYNC в
     * соответствии с параметрами, заданными в структуре #TLTR_CONFIG.
     * Данная функция применима только для крейтов с наличием данного разъема
     * (LTR-EU, LTR-CU, LTR-CEU).
     *
     * @param hcrate Описатель управляющего соединения с крейтом.
     * @param conf   Конфигурация линий разъема синхронизации крейта.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_Config(TLTR hcrate, TLTR_CONFIG conf);

    /**
     * Настройка генерации метки "СТАРТ".
     * <p>
     * Функция устанавливает режим генерации метки "СТАРТ" крейтом.
     * Данная функция работает только с крейтами, поддерживающими стандартный
     * механизм генерации  синхрометок (LTR-EU, LTR-CEU, LTR-CU).
     * Крейт может генерировать метку как от внешнего события, так и внутреннего
     * --- по команде с ПК.
     * <p>
     * В зависимости от значения режима поведение функции несколько отличается.
     * <p>
     * Если задан режим #LTR_MARK_INTERNAL, то при выполнении этой функции крейт
     * генерирует одиночную метку "СТАРТ", после чего не генерирует метки до
     * следующего вызова данной функции. Т.е. при внутренней генерации метки
     * "СТАРТ" необходимо вызывать данную функцию каждый раз, когда метка должна быть
     * сгенерирована.
     * <p>
     * Остальные режимы соответствуют внешней генерации метки. В них данная
     * функция просто настраивает крейт, чтобы он ожидал заданного в режиме события
     * и по каждому такому событию генерировал метку.
     * <p>
     * Чтобы отключить внешнюю генерацию меток, можно вызвать данную функцию
     * с указанием режима #LTR_MARK_OFF.
     * <p>
     * В случае закрытия соединения с крейтом без отключения генерации меток, крейт
     * все равно будет продолжать генерацию до явного отключения.
     *
     * @param hcrate Описатель управляющего соединения с крейтом.
     * @param mode   Режим генерации метки "СТАРТ" ---  значение из
     *               #en_LTR_MarkMode.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_MakeStartMark(TLTR hcrate, LTR_MarkMode mode);

    /**
     * Запуск генерации меток "СЕКУНДА".
     * <p>
     * Функция запускает генерацию секундных меток в указанном режиме.
     * Данная функция работает только с крейтами, поддерживающими стандартный
     * механизм генерации  синхрометок (LTR-EU, LTR-CEU, LTR-CU).
     * <p>
     * Если задан режим #LTR_MARK_INTERNAL, то после вызова данной функции крейт
     * начинает генерировать секундную метку раз в секунду (от внутреннего таймера).
     * В остальных режимах крейт ожидает внешнего события и генерирует секундную
     * метку по каждому событию.
     * <p>
     * Останов генерации выполняется с помощью функции LTR_StopSecondMark().
     * <p>
     * В случае закрытия соединения с крейтом без отключения генерации секундных
     * меток, крейт все равно будет продолжать генерацию до явного отключения.
     *
     * @param hcrate Описатель управляющего соединения с крейтом.
     * @param mode   Режим генерации метки "СЕКУНДА" ---  значение из
     *               #en_LTR_MarkMode.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_StartSecondMark(TLTR hcrate, LTR_MarkMode mode);

    /**
     * Останов генерации меток "СЕКУНДА".
     * <p>
     * При вызове данной функции крейт прекращает генерацию меток секунда, которая
     * была запущена ранее с помощью LTR_StartSecondMark()
     *
     * @param hcrate Описатель управляющего соединения с крейтом.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_StopSecondMark(TLTR hcrate);

    /**
     * @param hcrate   Описатель управляющего соединения с крейтом.
     * @param settings
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_PutSettings(TLTR hcrate, TLTR_SETTINGS settings);

    /* Передача произвольного запроса крейту */
    int LTR_CrateCustomCtlReq(TLTR hcrate, long req, long param, Pointer snd_buf, int snd_size,
                              @Out PointerByReference rcv_buf, int rcv_size, IntByReference recvd_size);

    int LTR_CrateGetArray(TLTR hcrate, long address, @Out PointerByReference buf, int size);

    int LTR_CratePutArray(TLTR hcrate, long address, Pointer buf, int size);

    // Получение сырых данных из крейта (если был установлен CC_RAW_DATA_FLAG)
    int LTR_GetCrateRawData(TLTR hcrate, @Out IntByReference data, @Out IntByReference tmark, int size, int timeout);

    /**
     * Сброс указанного модуля.
     * <p>
     * Данная функция позволяет сбросить любой модуль через управляющее соединение.
     * По выполнению этой функции в службе выполняются следующие действия:
     * - разрываются все клиентские соединения, установленные с данным модулем
     * - сбрасывается вся статистика, накопленная ltrd по данному модулю
     * - посылается команда сброса модуля для возвращения модуля в исходное
     * состояние
     * <p>
     * Данная функция может быть полезна в случае, если осталось незакрытое клиентское
     * соединение с модулем, которое не дает установить новое рабочее соединение
     * (возвращается ошибка #LTR_WARNING_MODULE_IN_USE). Вызов этой функции позволяет
     * сбросить не закрытое соединение.
     * <p>
     * Также функция может быть полезна, если программа закрылась не завершив корректно
     * работу с модулем, например, оставив запущенным сбор данных. Сброс модуля
     * позволяет остановить передачу от модуля ненужных данных, переведя его в начальное
     * состояние.
     * <p>
     * Данная функция поддерживается только службой ltrd (не поддерживается ранее
     * используемой программой LTR Server).
     *
     * @param ltr    Описатель управляющего соединения.
     * @param iface  Интерфейс подключения крейта (аналогично одноименному
     *               параметру LTR_OpenCrate()).
     * @param serial Серийный номер крейта (аналогично одноименному
     *               параметру LTR_OpenCrate()).
     * @param slot   Номер слота модуля (от #LTR_CC_CHNUM_MODULE1 до
     *               #LTR_CC_CHNUM_MODULE16).
     * @param flags  Дополнительные флаги, управляющие работой функции.
     *               Сейчас не используются, поэтому поле всегда должно
     *               быть равно нулю.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_ResetModule(TLTR ltr, int iface, String serial, int slot, long flags);

    /**
     * Установка уровня журнала.
     * <p>
     * Функция устанавливает, какого уровня сообщения будут выводится в журнал
     * службы ltrd. Все сообщения с менее важным уровнем выводиться не будут.
     *
     * @param ltr       Описатель управляющего соединения.
     * @param level     Устанавливаемый уровень вывода в журнал --- значение
     *                  из #en_LTR_LogLevel
     * @param permanent Если FALSE, то изменения касаются только текущего
     *                  запуска службы ltrd.
     *                  Если TRUE --- изменения сохраняются в настройках и
     *                  будут учитываться после перезапуска службы.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_SetLogLevel(TLTR ltr, int level, boolean permanent);

    /**
     * Получение текущего уровня журнала.
     * <p>
     * Функция возвращает установленный уровень вывода в журнал службы ltrd.
     *
     * @param ltr   Описатель управляющего соединения.
     * @param level В данной переменной возвращается установленный уровень
     *              журнала --- значение из #en_LTR_LogLevel.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetLogLevel(TLTR ltr, @Out IntByReference level);

    /**
     * Установка параметров работы службы ltrd.
     * <p>
     * Функция выполняет установку одного параметра из настроек работы службы ltrd.
     * Формат и смысл передаваемого значения определяется кодом параметра и описан
     * в описании каждого параметра.
     * Устанавливаемый параметр немедленно применяется и сохраняется в настройках
     * службы ltrd.
     * <p>
     * Данная функция поддерживается только службой ltrd (не поддерживается ранее
     * используемой программой LTR Server).
     *
     * @param hsrv  Описатель управляющего соединения.
     * @param param Код параметра --- значение из #en_LTRD_Params.
     * @param val   Указатель на данные с устанавливаемым значением.
     *              Формат данных может зависеть от параметра и указан
     *              в описании параметра.
     * @param size  Размер данных, передаваемых в качестве значения
     *              параметра (на которые указывает val).
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_SetServerParameter(TLTR hsrv, long param, Pointer val, int size);

    /**
     * Чтение параметров работы службы ltrd.
     * <p>
     * Функция выполняет чтение одного параметра из настроек работы службы ltrd.
     * Формат и смысл передаваемого значения определяется кодом параметра и описан
     * в описании каждого параметра.
     * <p>
     * Данная функция поддерживается только службой ltrd (не поддерживается ранее
     * используемой программой LTR Server).
     *
     * @param hsrv  Описатель управляющего соединения.
     * @param param Код параметра --- значение из #en_LTRD_Params
     * @param val   Указатель на данные, куда будет сохранено значение
     *              параметра.
     *              Формат данных может зависеть от параметра и указан
     *              в описании параметра.
     * @param size  Размер массива, на который указывает переменная val.
     *              Разные параметры могут требовать разного размера для
     *              сохранения значения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetServerParameter(TLTR hsrv, long param, @Out PointerByReference val, @Out IntByReference size);

    /**
     * Перезапуск службы ltrd.
     * <p>
     * При успешном выполнении данной команды служба ltrd закрывает все клиентские
     * соединения и все соединения с крейтами, и начинает работу сначала, заново
     * считывая свои настройки.
     * <p>
     * Соответственно, и текущее управляющее соединение, через которое передана
     * команда, становится недействительным ---  единственной функцией, которая
     * может и должна быть вызвана следующей,  является LTR_Close().
     *
     * @param ltr Описатель управляющего соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_ServerRestart(TLTR ltr);

    /**
     * Останов службы ltrd.
     * <p>
     * При успешном выполнении данной команды служба ltrd закрывает все клиентские
     * соединения и все соединения с крейтами и завершает свою работу.
     * <p>
     * Соответственно, и текущее управляющее соединение, через которое передана
     * команда, становится недействительным ---  единственной функцией, которая
     * может и должна быть вызвана следующей,  является LTR_Close().
     *
     * @param ltr Описатель управляющего соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_ServerShutdown(TLTR ltr);

    /**
     * Получение списка записей с IP-адресами крейтов.
     * <p>
     * Функция возвращает список записей с IP-адресами крейтов из настроек службы
     * ltrd (как с установленным соединением с крейтом, так и не установленным).
     * Также вместе с записью возвращается и состояние подключения крейта,
     * соответствующего данной записи.
     * <p>
     * Функция позволяет вернуть не весь список записей, а только тех, адреса которых
     * удовлетворяют заданному фильтру --- возвращаются только те IP адреса,
     * которые относятся к подсети, заданной стандартным образом с помощью
     * IP-адреса (ip_net) и маски подсети (ip_mask). Т.е. если задан адрес
     * "192.168.1.0" и маска "255.255.255.0", то будут возвращены записи с
     * IP-адресами вида "192.168.1.x", где x - любое значение от 0 до 255.
     * <p>
     * Если нужно получить все записи, то в качестве адреса и маски можно передать
     * нулевые значения.
     * <p>
     * Для получения информации о состоянии конкретной записи можно
     * задать полностью требуемый IP-адрес, а маску задать равной "255.255.255.255"
     * <p>
     * Для получения произвольного количества IP-записей функцию можно вызвать сперва
     * с нулевым значением max_entries, чтобы получить число записей в entries_found,
     * а затем уже выделить массив для приема нужного количества записей и вызвать
     * функцию повторно уже для получения информации по этим записям.
     *
     * @param ltr              Описатель управляющего соединения.
     * @param max_entries      Максимальное количество записей, которое может принять
     *                         массив info_array
     * @param ip_net           IP-адрес сети, использующийся для фильтрации возвращаемых
     *                         записей, в [32-битном формате](@ref sect_ip_addr_format).
     * @param ip_mask          Маска подсети для фильтрации возвращаемых записей
     *                         в [32-битном формате](@ref sect_ip_addr_format).
     * @param entries_found    В данной переменной возвращается общее количество
     *                         найденных записей, удовлетворяющих условию фильтра.
     *                         Это значение может быть больше max_entries.
     * @param entries_returned Количество записей, которое было возвращено
     *                         в массиве info_array. При успешным выполнении это
     *                         значение равно наименьшему из max_entries и
     *                         entries_found.
     * @param info_array       Массив структур #TLTR_CRATE_IP_ENTRY, в котором будут
     *                         возвращены найденные записи с IP-адресами. Данный
     *                         массив должен быть достаточного размера для сохранения
     *                         max_entries записей. Если в max_entries передано
     *                         нулевое значение, то в качестве данного параметра
     *                         может быть передан нулевой указатель.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetListOfIPCrates(TLTR ltr, long max_entries, int ip_net, int ip_mask,
                              @Out IntByReference entries_found, @Out IntByReference entries_returned,
                              @Out TLTR_CRATE_IP_ENTRY.Array info_array);

    /**
     * Добавление записи с IP-адресом крейта.
     * <p>
     * Функция добавляет запись с указанным параметром в список записей IP-адресов
     * крейтов службы ltd.
     * <p>
     * Чтобы установить соединение с крейтом по Ethernet (с использованием
     * LTR_ConnectIPCrate()) его IP-адрес должен быть уже в списке записей.
     * <p>
     * Если запись уже есть в списке, то данная функция только изменяет флаги
     * записи (аналогично LTR_SetIPCrateFlags()).
     *
     * @param ltr       Описатель управляющего соединения.
     * @param ip_addr   IP-адрес крейта в
     *                  [32-битном формате](@ref sect_ip_addr_format).
     * @param flags     Набор флагов, связанных с добавляемой записью.
     *                  Объединение по ИЛИ значений из #en_LTR_CrateIpFlags.
     * @param permanent Если FALSE, то изменения касаются только текущего
     *                  запуска службы ltrd.
     *                  Если TRUE --- изменения сохраняются в настройках и
     *                  будут учитываться после перезапуска службы.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_AddIPCrate(TLTR ltr, int ip_addr, long flags, boolean permanent);

    /**
     * Удаление записи с IP-адресом крейта.
     * <p>
     * Функция удаляет запись с указанным IP-адресом из списка IP-адресов крейтов
     * службы ltrd.
     * <p>
     * При этом с соответствующим крейтом не должно быть установлено соединение
     * (состояние записи должно быть отлично от #LTR_CRATE_IP_STATUS_ONLINE или
     * #LTR_CRATE_IP_STATUS_CONNECTING), в противном случае функция вернет ошибку.
     * Для удаления записи с подключенным крейтом сперва нужно разорвать соединение
     * с крейтом через LTR_DisconnectIPCrate().
     * <p>
     * Если указанная запись отсутствует в списке, то функция никак не повлияет
     * на список адресов и сразу завершится без ошибки.
     *
     * @param ltr       Описатель управляющего соединения
     * @param ip_addr   IP-адрес крейта в
     *                  [32-битном формате](@ref sect_ip_addr_format), запись
     *                  с которым должна быть удалена.
     * @param permanent Если FALSE, то изменения касаются только текущего
     *                  запуска службы ltrd.
     *                  Если TRUE --- изменения сохраняются в настройках и
     *                  будут учитываться после перезапуска службы.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_DeleteIPCrate(TLTR ltr, int ip_addr, boolean permanent);

    /**
     * Установление соединения с крейтом по IP-адресу.
     * <p>
     * Функция является командой службе ltrd, указывающей, что служба должна установить
     * соединение  с крейтом с заданным IP-адресом по Ethernet интерфейсу.
     * Запись с заданным адресом должна быть в списке записей с IP-адресами крейтов
     * службы (этот список можно получить с помощью LTR_GetListOfIPCrates()), иначе
     * функция вернет ошибку.
     * <p>
     * Завершение этой функции говорит о том, что служба приняла команду и начала
     * подключение к крейту, но подключение еще может быть не завершено.
     * При этом состояние соединения с крейтом для записи изменяется на
     * #LTR_CRATE_IP_STATUS_CONNECTING.
     * <p>
     * По завершению подключения это состояние изменится на
     * #LTR_CRATE_IP_STATUS_ONLINE при успешном подключении или на
     * #LTR_CRATE_IP_STATUS_ERROR при ошибке, что и является признаком завершения
     * операции. Получить текущее состояние подключения можно получив информацию о записи
     * с помощью LTR_GetListOfIPCrates(),
     * <p>
     * Также при успешном завершении подключения крейт появится в списке активных
     * крейтов, который можно получить с помощью LTR_GetCrates() или LTR_GetCratesEx().
     * <p>
     * Если при вызове данной функции крейт уже подключен (состояние подключения
     * #LTR_CRATE_IP_STATUS_ONLINE) или идет процесс подключения (состояние
     * #LTR_CRATE_IP_STATUS_CONNECTING), то функция просто завершится успешно,
     * не выполняя никаких действий.
     *
     * @param ltr     Описатель управляющего соединения.
     * @param ip_addr IP-адрес крейта в
     *                [32-битном формате](@ref sect_ip_addr_format),
     *                с которым нужно установить соединение.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_ConnectIPCrate(TLTR ltr, int ip_addr);

    /**
     * Разрыв соединения с крейтом по IP-адресу.
     * <p>
     * При выполнении данной функции служба разрывает соединение с крейтом, подключенным
     * по Ethernet, с указанным адресом. Крейт исчезает из списка активных крейтов
     * и состояние подключения для записи с данным IP-адресом изменяется на
     * #LTR_CRATE_IP_STATUS_OFFLINE.
     * <p>
     * Запись с таким адресом должна быть среди списка записей с IP-адресами крейтов
     * службы ltrd, иначе функция вернет ошибку.
     * <p>
     * Если запись с указанным адресом присутствует, но нет активного соединения
     * (состояние подключение отлично от #LTR_CRATE_IP_STATUS_ONLINE или
     * #LTR_CRATE_IP_STATUS_CONNECTING), то функция завершается успешно,
     * не выполняя каких-либо действий.
     *
     * @param ltr     Описатель управляющего соединения.
     * @param ip_addr IP-адрес крейта в
     *                [32-битном формате](@ref sect_ip_addr_format),
     *                с которым нужно установить соединение.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_DisconnectIPCrate(TLTR ltr, int ip_addr);

    /**
     * Установление соединения со всеми крейтами с признаком автоподключения.
     * <p>
     * Функция дает команду службе ltrd установить соединение через интерфейс Ethernet
     * со всеми крейтами, для записей с IP-адресами которых установлен флаг
     * #LTR_CRATE_IP_FLAG_AUTOCONNECT.
     * <p>
     * При этом запуск подключения осуществляется только для тех записей, для которых
     * нет активного соединения, т.е. на записи с текущим состоянием
     * #LTR_CRATE_IP_STATUS_ONLINE или #LTR_CRATE_IP_STATUS_CONNECTING вызов функции
     * влияния не оказывает.
     * <p>
     * Как и в случае с LTR_ConnectIPCrate() завершение работы функции означает только
     * то, что процесс подключения запущен, а о завершении подключения можно узнать
     * при необходимости по изменению состояния подключения соответствующих записей
     * (которое можно узнать с помощью LTR_GetListOfIPCrates().
     * <p>
     * Если нет ни одной записи с установленным флагом  #LTR_CRATE_IP_FLAG_AUTOCONNECT,
     * по которой не установлено соединение с крейтом, то функция завершается успешно,
     * не выполняя каких-либо действий.
     *
     * @param ltr Описатель управляющего соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_ConnectAllAutoIPCrates(TLTR ltr);

    /**
     * Разрыв соединения со всеми крейтами, подключенными по Ethernet.
     * <p>
     * По данной команде служба ltrd закрывает все активные соединения с крейтами,
     * подключенными через интерфейс Ethernet. Все крейты будут удалены из списка
     * активных крейтов и все IP-записи изменят состояние подключения на
     * #LTR_CRATE_IP_STATUS_OFFLINE.
     * <p>
     * Если на момент вызова функции не было ни одного крейта, подключенного по
     * Ethernet, то функция завершается успешно, не выполняя каких-либо действий.
     *
     * @param ltr Описатель управляющего соединения.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_DisconnectAllIPCrates(TLTR ltr);


    /**
     * Установка флагов для записи с IP-адресом крейта.
     * <p>
     * Функция изменяет значение флагов, связанных с уже присутствующей записью
     * с IP-адресом, на указанное значение.
     * Запись с заданным IP-адресом должна присутствовать в списке записей службы
     * ltrd, в противном случае функция завершится с ошибкой.
     *
     * @param ltr       Описатель управляющего соединения.
     * @param ip_addr   IP-адрес крейта в
     *                  [32-битном формате](@ref sect_ip_addr_format),
     *                  с которым нужно установить соединение.
     * @param flags     Новый набор флагов, связанных с записью.
     *                  Объединение по ИЛИ значений из #en_LTR_CrateIpFlags.
     * @param permanent Если FALSE, то изменения касаются только текущего
     *                  запуска службы ltrd.
     *                  Если TRUE --- изменения сохраняются в настройках и
     *                  будут учитываться после перезапуска службы.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_SetIPCrateFlags(TLTR ltr, int ip_addr, long flags, boolean permanent);

    /**
     * Прием данных от модуля.
     * <p>
     * Функция принимает данные от модуля в 32-битных словах в специальном формате
     * слов LTR. Кроме того, функция анализирует информацию о пришедших
     * [синхрометках](@ref sect_marks)   и о переполнении буфера в службе ltrd,
     * обновляя значения поля #TLTR::flags  описателя модуля и заполняя массив tmark.
     * <p>
     * Функция возвращает управление либо когда примет запрошенное количество слов,
     * либо по истечении таймаута. При этом реально принятое количество слов можно
     * узнать по возвращенному значению.
     *
     * @param hnd     Описатель соединения с модулем.
     * @param buf     Массив, в который будут сохранены принятые слова. Должен
     *                быть размером на size 32-битных слов.
     * @param tmark   Указатель на массив размером на size 32-битных слов,
     *                в который будут сохранены значения [синхрометок](@ref sect_marks),
     *                соответствующие принятым данным. Т.е. принятому слову
     *                data[i] соответствует элемент tmark[i], указывающий
     *                количество меток "СТАРТ" и "СЕКУНДА", соответствующих
     *                этому слову. Формат данных слов описан в разделе, посвященному
     *                [синхрометкам](@ref sect_marks).
     *                Если синхрометки не используются, то можно передать
     *                в качестве параметра NULL.
     * @param size    Запрашиваемое количество 32-битных слов, которое нужно
     *                принять от модуля.
     * @param timeout Таймаут на выполнение операции в миллисекундах.
     *                Значение 0 означает значение таймаута по умолчанию. Если в течение
     *                заданного времени не будет принято запрашиваемое количество
     *                слов, то функция все равно вернет управление, возвратив
     *                в качестве результата реально принятое количество слов.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_Recv(TLTR hnd, int[] buf, int[] tmark, long size, long timeout);

    /**
     * Передача данных в модуль.
     * <p>
     * Функция посылает данные модулю в 32-битных словах в специальном формате
     * слов LTR.
     * <p>
     * Функция возвращает управление либо когда все данные будут записаны в буфер на
     * передачу, либо по истечению таймаута.
     * При этом реальное количество слов, записанное в буфер на передачу, можно
     * узнать по возвращенному значению. Т.е. возвращенное значение гарантирует,
     * что данное количество слов было поставлено на передачу, но эти данные еще
     * могут не дойти до модуля на момент завершения функции.
     *
     * @param ltr     Описатель соединения с модулем.
     * @param buf     Массив, содержащий данные в виде size 32-битных слов,
     *                которые нужно передать в модуль.
     * @param size    Количество слов, которое нужно послать модулю.
     * @param timeout Таймаут на выполнение операции в миллисекундах.
     *                Значение 0 означает значение таймаута по умолчанию. Если в течение
     *                заданного времени в буфере на передачу не будет места
     *                для записи запрашиваемого количества слов, то функция
     *                все равно вернет управление, возвратив в качестве результата
     *                реально количество слов, записанных в буфер.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_Send(TLTR ltr, int[] buf, long size, long timeout);

    /**
     * Чтение времени последней секундной метки.
     * <p>
     * Данная функция возвращает значение времени, соответствующее последнему обнаруженному
     * приходу расширенной метки "СЕКУНДА" с абсолютным временем при приеме данных
     * по данному соединению посредством LTR_Recv().
     * <p>
     * Данная функция работает только в случае, если крейт поддерживает генерацию
     * расширенной метки "СЕКУНДА", с указанием абсолютного времени, каким-либо
     * способом. Например, с использованием сервера времени, который передает
     * время по протоколу IRIG-B.
     * <p>
     * Если метки "СЕКУНДА" с абсолютным временем принято не было, то будет
     * возвращено значение 0.
     *
     * @param ltr      Описатель соединения с модулем
     * @param unixtime Абсолютное значение времени в секундах с 1 января 1970 года
     *                 (unixtime).
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_GetLastUnixTimeMark(TLTR ltr, @Out LongLongByReference unixtime);

    // Прием данных из крейта с поддержкой расширенных меток времени
    int LTR_RecvEx(TLTR ltr, int[] data, int[] tmark, long size, long timeout, long[] unixtime);

    /**
     * Получение текстового сообщения об ошибке.
     * <p>
     * Функция возвращает строку, соответствующую переданному коду ошибки, в кодировке
     * CP1251 для ОС Windows или UTF-8 для ОС Linux. Функция поддерживает только
     * только коды ошибок, определенные в данной библиотеке и
     * возвращаемые функциями данной библиотеки.
     * Библиотеки для конкретных модулей могут иметь дополнительные коды ошибок и
     * свои функции получения текстового описания ошибки, которые поддерживают
     * эти дополнительные коды ошибок.
     *
     * @param err Код ошибки
     * @return Указатель на строку, содержащую сообщение об ошибке.
     */
    String LTR_GetErrorString(int err);

    /**
     * Установка таймаута по умолчанию для соединения.
     * <p>
     * Функция устанавливает таймаут по умолчанию на выполнения операций для указанного
     * соединения. При открытии соединения этот таймаут равен
     * #LTR_DEFAULT_SEND_RECV_TIMEOUT.
     * <p>
     * Для управляющего соединения этот таймат определяет время на выполнения любой
     * команды (от передачи запроса службе до приема ответа).
     * Для соединения с модулем --- это таймаут, который используется
     * в LTR_Recv() или LTR_Send(), если в них передано нулевое значение таймаута
     *
     * @param hnd  Описатель соединения.
     * @param tout Таймаут по умолчанию в мс.
     * @return Код ошибки <code>{@link LTR_ERRORS}</code>.
     */
    int LTR_SetTimeout(TLTR hnd, long tout);

    /* Управление приоритетом процесса ltrserver.exe */
    int LTR_SetServerProcessPriority(TLTR ltr, int priority);

    /* Чтение приоритета процесса ltrserver.exe */
    int LTR_GetServerProcessPriority(TLTR ltr, @Out IntByReference priority);

    /* Чтение режима поиска IP-крейтов в локальной сети */
    int LTR_GetIPCrateDiscoveryMode(TLTR ltr, @Out ByteByReference enabled, @Out ByteByReference autoconnect);

    /* Установка режима поиска IP-крейтов в локальной сети */
    int LTR_SetIPCrateDiscoveryMode(TLTR ltr, boolean enabled, boolean autoconnect, boolean permanent);

    int LTR_SendShutdown(TLTR ltr);
}
