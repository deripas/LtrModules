package ru.lcard.ltr.ltrapi;

import lombok.ToString;
import ru.lcard.ltr.StructPack4;

import static ru.lcard.ltr.ltrapi.LtrApi.LTR_CRATE_SERIAL_SIZE;


/**
 * Описатель соединения.
 * <p>
 * Данная структура содержит всю информацию о соединении со службой ltrd.
 * Данная структура используется в большинстве функций в качестве первого параметра.
 * Часть полей (saddr, sport, csn, cc) предназначены для заполнения пользователем перед
 * установкой соединения для задания параметров соединения и после этого уже не изменяются.
 * Часть параметров (flags, tmark) предназначены только для чтения и отображают дополнительную
 * информацию, которая обновляется при приеме данных через {@link LtrApi#LTR_Recv} или в других случаях.
 */
@ToString(exclude = "Internal")
public class TLTR extends StructPack4 {

    /**
     * IP-адрес машины, на которой запущена служба ltrd, в 32-битном формате.
     * По умолчанию устанавливается в {@link LtrApi#LTRD_ADDR_DEFAULT} равный
     * {@link LtrApi#LTRD_ADDR_LOCAL} , что соответствует случаю, когда служба запущена на той
     * же машине, что и пользовательская программа.
     */
    public DWORD saddr = new DWORD();

    /**
     * Номер TCP порта, который будет использоваться при подключении к службе
     * ltrd. По умолчанию используется {@link LtrApi#LTRD_PORT_DEFAULT}.
     */
    public WORD sport = new WORD();

    /**
     * Серийный номер крейта, которому должно соответствовать соединение.
     * Если задана пустая строка (как по умолчанию), то будет установлено
     * соединение с первым крейтом из текущего списка активных крейтов ltrd.
     * В таком случае после установки соединение это поле будет изменено на
     * реальный серийный номер крейта, с которым установлено соединение.
     * Если записана строка {@link LtrApi#LTR_CSN_SERVER_CONTROL}, то будет установлено
     * управляющее соединение со службой ltrd, которое не связано ни с одним крейтом
     * и может быть установлено при отсутствии активных крейтов.
     */
    public AsciiString csn = new AsciiString(LTR_CRATE_SERIAL_SIZE);

    /**
     * Тип канала для соединения с ltrd. Задается одной из констант из
     * {@link LTR_CC_ChNum}. Указывает, является ли данное соединение управляющим
     * {@code LTR_CC_CHNUM_CONTROL} или это соединение с модулем в заданном
     * слоте {@code LTR_CC_CHNUM_MODULE1} .. {@code LTR_CC_CHNUM_MODULE16}.
     * Может также в редких случаях при необходимости объединяться с флагами
     * {@link LTR_CC_Iface} и {@link LTR_CC_Flags} для указания дополнительных параметров
     * соединения.
     */
    public WORD cc = new WORD();
    /**
     * Флаги состояния соединения. Объединенный через логическое ИЛИ набор
     * значений из {@link LTR_ChStateFlags}.
     * Данное поле предназначено только для чтения и не должно явно изменяться
     * пользователем.
     */
    public DWORD flags = new DWORD();

    /**
     * Последнее значение синхрометок, принятое для данного
     * соединения.
     * Данное поле обновляется при выполнении {@link LtrApi#LTR_Recv}, если во время
     * приема были обнаружены синхрометки.
     * Данное поле предназначено только для чтения пользователем и
     * не должно явно изменяться пользователем.
     */
    public DWORD tmark = new DWORD();

    /**
     * Непрозрачный указатель на структуру с параметрами, необходимыми для
     * обеспечения обмена. Пользователь никак не должен использовать данное поле.
     */
    public Pointer Internal = new Pointer();
}
